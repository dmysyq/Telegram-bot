import asyncio
import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import pyperclip
from main import get_parsed_products

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.environ["TELEGRAM_BOT_TOKEN"])
dp = Dispatcher()


async def send_product(channel_id, products_to_send):
    message_text = (
        f"{products_to_send.title}\n\n"

        f"{products_to_send.price} " f"({products_to_send.discount}%)\n"
        f"–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {products_to_send.old_price}\n\n"
        
        f"{products_to_send.link}\n"
    )

    await bot.send_message(channel_id, message_text)

'''
def get_translations(user_id):
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    localization_path = f"localization/translations_{user_id}.json"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    with open(localization_path, "r", encoding="utf-8") as file:
        translations = json.load(file)
    
    return translations
'''
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ö–∞–Ω–∞–ª—ã"), types.KeyboardButton(text="–¶–µ–Ω—ã")],
        [types.KeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), types.KeyboardButton(text="–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"), types.KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")],
        [types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π ID"), types.KeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å")],  # –î–æ–±–∞–≤–ª–µ–Ω–æ "–°–∫–∏–¥–∫–∏"
    ]
    
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", reply_markup=keyboard)


@dp.message(lambda message: message.text == "–¶–µ–Ω—ã")
async def shops_handler(message: types.Message):
    kb_shops = [
        [types.KeyboardButton(text="shop.kz"), types.KeyboardButton(text="sulpak.kz"), types.KeyboardButton(text="dns-shop.kz")],
        [types.KeyboardButton(text='/start')]
    ]

    keyboard_shops = types.ReplyKeyboardMarkup(keyboard=kb_shops, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –º–∞–≥–∞–∑–∏–Ω", reply_markup=keyboard_shops)


@dp.message(lambda message: message.text == "shop.kz")
async def shop_kz_handler(message: types.Message):
    kb_shop_kz = [
        [types.KeyboardButton(text="–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã shop.kz"), types.KeyboardButton(text="–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã shop.kz"), types.KeyboardButton(text="–ù–æ—É—Ç–±—É–∫–∏ shop.kz")],
        [types.KeyboardButton(text='/start')]
    ]

    keyboard_shop_kz = types.ReplyKeyboardMarkup(keyboard=kb_shop_kz, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ shop.kz", reply_markup=keyboard_shop_kz)


@dp.message(lambda message: message.text == "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã shop.kz")
async def smartphones_handler(message: types.Message):
    category = 'smartphones_shopkz'
    channel_id = message.chat.id
    parsed_products = get_parsed_products(category, start_page=1, end_page=10)

    for product in parsed_products:
        await send_product(channel_id, product)


@dp.message(lambda message: message.text == "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã shop.kz")
async def video_cards_handler(message: types.Message):
    category = 'video_cards_shopkz'
    channel_id = message.chat.id
    parsed_products = get_parsed_products(category, start_page=1, end_page=10)

    for product in parsed_products:
        await send_product(channel_id, product)


@dp.message(lambda message: message.text == "–ù–æ—É—Ç–±—É–∫–∏ shop.kz")
async def laptops_handler(message: types.Message):
    category = 'laptops_shopkz'
    channel_id = message.chat.id
    parsed_products = get_parsed_products(category, start_page=1, end_page=10)

    for product in parsed_products:
        await send_product(channel_id, product)


@dp.message(lambda message: message.text == "sulpak.kz")
async def sulpak_kz_handler(message: types.Message):
    kb_sulpak_kz = [
        [types.KeyboardButton(text="–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã sulpak.kz"), types.KeyboardButton(text="–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã sulpak.kz"), types.KeyboardButton(text="–ù–æ—É—Ç–±—É–∫–∏ sulpak.kz")],
        [types.KeyboardButton(text='/start')]
    ]

    keyboard_sulpak_kz = types.ReplyKeyboardMarkup(keyboard=kb_sulpak_kz, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ sulpak.kz", reply_markup=keyboard_sulpak_kz)


@dp.message(lambda message: message.text == "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã sulpak.kz")
async def smartphones_sulpak_handler(message: types.Message):
    category = 'smartphones_sulpakkz'
    channel_id = message.chat.id
    parsed_products = get_parsed_products(category, start_page=1, end_page=10)

    for product in parsed_products:
        await send_product(channel_id, product)


@dp.message(lambda message: message.text == "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã sulpak.kz")
async def video_cards_sulpak_handler(message: types.Message):
    category = 'video_cards_sulpakkz'
    channel_id = message.chat.id
    parsed_products = get_parsed_products(category, start_page=1, end_page=10)

    for product in parsed_products:
        await send_product(channel_id, product)


@dp.message(lambda message: message.text == "–ù–æ—É—Ç–±—É–∫–∏ sulpak.kz")
async def laptops_sulpak_handler(message: types.Message):
    category = 'laptops_sulpakkz'
    channel_id = message.chat.id
    parsed_products = get_parsed_products(category, start_page=1, end_page=10)

    for product in parsed_products:
        await send_product(channel_id, product)

@dp.message(lambda message: message.text == "dns-shop.kz")
async def dns_shop_handler(message: types.Message):
    kb_dns_shop = [
        [types.KeyboardButton(text="–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã DNS"), types.KeyboardButton(text="–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã DNS"), types.KeyboardButton(text="–ù–æ—É—Ç–±—É–∫–∏ DNS")],
        [types.KeyboardButton(text='/start')]
    ]

    keyboard_dns_shop = types.ReplyKeyboardMarkup(keyboard=kb_dns_shop, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ dns-shop.kz", reply_markup=keyboard_dns_shop)

@dp.message(lambda message: message.text == "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã DNS")
async def smartphones_dns_handler(message: types.Message):
    category = 'smartphones_dns'
    channel_id = message.chat.id
    parsed_products = get_parsed_products(category, start_page=1, end_page=10)

    for product in parsed_products:
        await send_product(channel_id, product)

@dp.message(lambda message: message.text == "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã DNS")
async def video_cards_dns_handler(message: types.Message):
    category = 'video_cards_dns'
    channel_id = message.chat.id
    parsed_products = get_parsed_products(category, start_page=1, end_page=10)

    for product in parsed_products:
        await send_product(channel_id, product)

@dp.message(lambda message: message.text == "–ù–æ—É—Ç–±—É–∫–∏ DNS")
async def laptops_dns_handler(message: types.Message):
    category = 'laptops_dns'
    channel_id = message.chat.id
    parsed_products = get_parsed_products(category, start_page=1, end_page=10)

    for product in parsed_products:
        await send_product(channel_id, product)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ö–∞–Ω–∞–ª—ã"
@dp.message(lambda message: message.text == "–ö–∞–Ω–∞–ª—ã")
async def show_channels(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–ö–∞–Ω–∞–ª —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π", url="–æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ")) # https://t.me/+_ooSjqH70_JiMTk6
    await message.answer("–ö–∞–Ω–∞–ª —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π ID"
@dp.message(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π ID")
async def show_user_id(message: types.Message):
    user_id = message.from_user.id
    await message.answer(f"–í–∞—à ID: {user_id}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@dp.message(lambda message: message.text == "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def extend_subscription(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ—É–Ω–∫—Ü–∏—è '–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"
@dp.message(lambda message: message.text == "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")
async def my_subscription(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ—É–Ω–∫—Ü–∏—è '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞' —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π.")

# –ö–Ω–æ–ø–∫–∞ "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å"
@dp.message(lambda message: message.text == "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å")
async def recommend_bot(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –±–æ—Ç–∞", callback_data="copy_recommendation"))

    await message.answer(
        "–†–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞! üëç\n\n"
        "–î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data == "copy_recommendation")
async def copy_recommendation(callback_query: types.CallbackQuery):
    recommendation_text = "–†–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞! üëç\n\n https://t.me/SkidkiKZ_Bot"
    await callback_query.answer(f"–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {recommendation_text}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
    pyperclip.copy(recommendation_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
'''
@dp.message(lambda message: message.text == get_translations(message.from_user.id)["change_language"])
async def change_language(message: types.Message):
    translations = get_translations(message.from_user.id)
    await message.answer(translations["choose_language"])
'''
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
